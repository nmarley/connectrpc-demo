// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/random.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "demoapi/pb/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RandomServiceName is the fully-qualified name of the RandomService service.
	RandomServiceName = "random.v1.RandomService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RandomServiceSubscribeRandomProcedure is the fully-qualified name of the RandomService's
	// SubscribeRandom RPC.
	RandomServiceSubscribeRandomProcedure = "/random.v1.RandomService/SubscribeRandom"
)

// RandomServiceClient is a client for the random.v1.RandomService service.
type RandomServiceClient interface {
	// Server-streaming: backend pushes updates to the browser.
	SubscribeRandom(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.Number], error)
}

// NewRandomServiceClient constructs a client for the random.v1.RandomService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRandomServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RandomServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	randomServiceMethods := v1.File_v1_random_proto.Services().ByName("RandomService").Methods()
	return &randomServiceClient{
		subscribeRandom: connect.NewClient[v1.SubscribeRequest, v1.Number](
			httpClient,
			baseURL+RandomServiceSubscribeRandomProcedure,
			connect.WithSchema(randomServiceMethods.ByName("SubscribeRandom")),
			connect.WithClientOptions(opts...),
		),
	}
}

// randomServiceClient implements RandomServiceClient.
type randomServiceClient struct {
	subscribeRandom *connect.Client[v1.SubscribeRequest, v1.Number]
}

// SubscribeRandom calls random.v1.RandomService.SubscribeRandom.
func (c *randomServiceClient) SubscribeRandom(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.Number], error) {
	return c.subscribeRandom.CallServerStream(ctx, req)
}

// RandomServiceHandler is an implementation of the random.v1.RandomService service.
type RandomServiceHandler interface {
	// Server-streaming: backend pushes updates to the browser.
	SubscribeRandom(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.Number]) error
}

// NewRandomServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRandomServiceHandler(svc RandomServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	randomServiceMethods := v1.File_v1_random_proto.Services().ByName("RandomService").Methods()
	randomServiceSubscribeRandomHandler := connect.NewServerStreamHandler(
		RandomServiceSubscribeRandomProcedure,
		svc.SubscribeRandom,
		connect.WithSchema(randomServiceMethods.ByName("SubscribeRandom")),
		connect.WithHandlerOptions(opts...),
	)
	return "/random.v1.RandomService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RandomServiceSubscribeRandomProcedure:
			randomServiceSubscribeRandomHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRandomServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRandomServiceHandler struct{}

func (UnimplementedRandomServiceHandler) SubscribeRandom(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.Number]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("random.v1.RandomService.SubscribeRandom is not implemented"))
}
